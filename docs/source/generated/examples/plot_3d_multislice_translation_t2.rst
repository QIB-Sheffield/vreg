
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "generated\examples\plot_3d_multislice_translation_t2.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_generated_examples_plot_3d_multislice_translation_t2.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_generated_examples_plot_3d_multislice_translation_t2.py:


==============================================
3D translation: multislice 2D image to 3D mask
==============================================

.. GENERATED FROM PYTHON SOURCE LINES 8-9

Setup

.. GENERATED FROM PYTHON SOURCE LINES 9-17

.. code-block:: Python

    import vreg
    from tqdm import tqdm


    # Set this to False to show the results
    OFF_SCREEN = True









.. GENERATED FROM PYTHON SOURCE LINES 18-19

Get data

.. GENERATED FROM PYTHON SOURCE LINES 19-30

.. code-block:: Python


    dixon = vreg.Volume(*vreg.fetch('Dixon_water'))
    lk = vreg.fetch('left_kidney')
    rk = vreg.fetch('right_kidney')
    lk = vreg.affine_reslice(lk[0], lk[1], dixon[1], output_shape=dixon[0].shape)
    rk = vreg.affine_reslice(rk[0], rk[1], dixon[1], output_shape=dixon[0].shape)
    mask = (lk[0]+rk[0], dixon[1])
    dixon = vreg.mask_volume(dixon[0], dixon[1], mask[0], mask[1], 20)
    multislice = vreg.fetch('T2star')
    #multislice = vreg.fetch('T1')



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "C:\Users\steve\Dropbox\Software\vreg\docs\examples\plot_3d_multislice_translation_t2.py", line 23, in <module>
        lk = vreg.affine_reslice(lk[0], lk[1], dixon[1], output_shape=dixon[0].shape)
    TypeError: 'Volume' object is not subscriptable




.. GENERATED FROM PYTHON SOURCE LINES 31-32

Reslice left kidney ROI to the T1-map (slice 0)

.. GENERATED FROM PYTHON SOURCE LINES 32-48

.. code-block:: Python


    mask_slices = [
        vreg.affine_reslice(
            mask[0], mask[1], oneslice[1], output_shape=oneslice[0].shape,
        ) for oneslice in multislice
    ]
    vreg.plot_overlay_2d(
        [v[0] for v in multislice], 
        [v[0] for v in mask_slices],
        title='Original data',
        off_screen=OFF_SCREEN,
    )

    exit()



.. GENERATED FROM PYTHON SOURCE LINES 49-50

3D translation in slice coords

.. GENERATED FROM PYTHON SOURCE LINES 50-81

.. code-block:: Python


    grid = (
        [-20, 20, 20],
        [-20, 20, 20],
        [-5, 5, 5],
    ) 
    translation = [
        vreg.align(
            moving=mask[0], moving_affine=mask[1],
            #moving=dixon[0], moving_affine=dixon[1],
            static=oneslice[0], static_affine=oneslice[1],
            transformation=vreg.translate_passive_ortho,
            metric=vreg.mutual_information,
            optimize='brute', 
            options={
                'grid':grid, 
                'desc':'Translating ' + str(z) + ' out of ' + str(len(multislice))
            },
        ) for z, oneslice in enumerate(multislice)
    ]
    # Apply the translation that we found
    mask_slices = [
        vreg.translate_passive_ortho(mask[0], mask[1], oneslice[0].shape, 
                                     oneslice[1], translation[z]) 
        for z, oneslice in enumerate(multislice)
    ]
    # Plot the result
    vreg.plot_overlay_2d([v[0] for v in multislice], mask_slices, 
                         title='3D translation')



.. GENERATED FROM PYTHON SOURCE LINES 82-83

Fine tune left kidney with a rigid transformation

.. GENERATED FROM PYTHON SOURCE LINES 83-133

.. code-block:: Python


    grids = [
        (
            [-0.2, 0.2, 4],
            [-0.2, 0.2, 4],
            [-0.2, 0.2, 4],
            [t[0]-2, t[0]+2, 4],
            [t[1]-2, t[1]+2, 4],
            [t[2]-2, t[2]+2, 4],
        ) 
    for t in translation]

    # bounds = [
    #     (
    #         [g[0] for g in grid],
    #         [g[1] for g in grid],
    #     )
    # for grid in grids]

    # Find the transformation
    params = [
        vreg.align(
            moving=lk[0], moving_affine=lk[1],
            #moving=dixon[0], moving_affine=dixon[1],
            static=oneslice[0], static_affine=oneslice[1],
            transformation=vreg.rigid_passive_com_ortho,
            metric=vreg.mutual_information,
            # optimize='LS',
            # parameters=[0]*3 + list(translation[z]),
            # options={
            #     'bounds': bounds[z],
            #     'abs_step': [0.01]*3+[0.1]*3,
            # },
            optimize='brute', 
            options={
                'grid':grids[z],
                'desc':'Transforming ' + str(z) + ' out of ' + str(len(multislice))
            },
        ) for z, oneslice in tqdm(enumerate(multislice), desc='Left kidney alignment')
    ]
    # Apply the transformation to the mask
    mask_slices = [
        vreg.rigid_passive_com_ortho(lk[0], lk[1], oneslice[0].shape, 
                                     oneslice[1], params[z]) 
        for z, oneslice in enumerate(multislice)
    ]
    # Plot the result
    vreg.plot_overlay_2d([v[0] for v in multislice], mask_slices, 
                         title='3D rigid')


.. GENERATED FROM PYTHON SOURCE LINES 134-135

Fine tune right kidney with a rigid transformation

.. GENERATED FROM PYTHON SOURCE LINES 135-169

.. code-block:: Python


    # Find the transformation
    params = [
        vreg.align(
            moving=rk[0], moving_affine=rk[1],
            #moving=dixon[0], moving_affine=dixon[1],
            static=oneslice[0], static_affine=oneslice[1],
            transformation=vreg.rigid_passive_com_ortho,
            metric=vreg.mutual_information,
            # parameters=[0]*3 + list(translation[z]),
            # optimize='LS',
            # options={
            #     'bounds': bounds[z],
            #     'abs_step': [0.01]*3+[0.1]*3,
            # },
            optimize='brute', 
            options={
                'grid':grids[z],
                'desc':'Transforming ' + str(z) + ' out of ' + str(len(multislice))
            },
        ) for z, oneslice in tqdm(enumerate(multislice), desc='Right kidney alignment')
    ]
    # Apply the transformation to the mask
    mask_slices = [
        vreg.rigid_passive_com_ortho(rk[0], rk[1], oneslice[0].shape, 
                                     oneslice[1], params[z]) 
        for z, oneslice in enumerate(multislice)
    ]
    # Plot the result
    vreg.plot_overlay_2d([v[0] for v in multislice], mask_slices, 
                         title='3D rigid')





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.106 seconds)


.. _sphx_glr_download_generated_examples_plot_3d_multislice_translation_t2.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_3d_multislice_translation_t2.ipynb <plot_3d_multislice_translation_t2.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_3d_multislice_translation_t2.py <plot_3d_multislice_translation_t2.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_3d_multislice_translation_t2.zip <plot_3d_multislice_translation_t2.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
